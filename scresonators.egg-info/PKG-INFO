Metadata-Version: 2.4
Name: scresonators
Version: 0.1.0
Summary: A namespace package for measuring and fitting superconducting resonator data
Author: Boulder Cryogenic Quantum Testbed
Maintainer: Boulder Cryogenic Quantum Testbed
License: MIT License
        
        Copyright (c) 2023 Corey Rae McRae
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/Boulder-Cryogenic-Quantum-Testbed/scresonators
Project-URL: Repository, https://github.com/Boulder-Cryogenic-Quantum-Testbed/scresonators.git
Project-URL: Issues, https://github.com/Boulder-Cryogenic-Quantum-Testbed/scresonators/issues
Keywords: superconducting resonators,quantum computing,microwave measurements,fitting,physics
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Physics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: matplotlib>=3.3.0
Requires-Dist: lmfit>=1.0.0
Requires-Dist: attrs>=21.0.0
Requires-Dist: inflect>=5.0.0
Requires-Dist: pyvisa>=1.11.0
Requires-Dist: pyvisa-py>=0.5.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: mypy>=0.800; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=0.5; extra == "docs"
Provides-Extra: jupyter
Requires-Dist: jupyter>=1.0.0; extra == "jupyter"
Requires-Dist: ipykernel>=6.0.0; extra == "jupyter"
Requires-Dist: notebook>=6.0.0; extra == "jupyter"
Dynamic: license-file

# Scresonators Namespace Package

This is a namespace package for the scresonators library, which provides tools for measuring and fitting superconducting resonator data.

This is forked from https://github.com/Boulder-Cryogenic-Quantum-Testbed/scresonators, who wrote all of the fitting code. We have fixed a few bugs and added measurement code on top. At some point, a rogue AI agent deleted the github history that shows the connection. Sorry! 

## Package Structure

The package is organized into two main subpackages:

- `scresonators.fit_resonator`: Contains modules for analyzing and fitting resonator data
- `scresonators.measurement`: Contains modules for measurement and data acquisition

## Installation

To install the package, you can use pip:

```bash
pip install -e .
```

This will install the package in development mode, allowing you to make changes to the code and have them immediately reflected in your Python environment.

## Usage

### Fit Resonator

The `fit_resonator` subpackage provides tools for analyzing and fitting resonator data. Here's a simple example:

```python
import numpy as np
import matplotlib.pyplot as plt
from scresonators.fit_resonator.resonator import Resonator, from_columns

# Create some synthetic data
freqs = np.linspace(5e9, 5.1e9, 1000)
center_freq = 5.05e9
Q = 10000
Qc = 15000

# Calculate the response
delta = (freqs - center_freq) / center_freq
response = 1 - (Q / Qc) / (1 + 2j * Q * delta)

# Convert to amplitude and phase
amps = 20 * np.log10(np.abs(response))
phases = np.angle(response)

# Create a Resonator object
resonator = Resonator()
resonator.from_columns(freqs, amps, phases)

# Set up the fitting method
resonator.fit_method(
    method="DCM", 
    MC_iteration=3, 
    MC_rounds=100, 
    preprocess_method="circle"
)

# Perform the fit
output = resonator.fit(plot="png")

# Print the results
print(f"Q = {output[0][0]:.0f}")
print(f"Qc = {output[0][1]:.0f}")
print(f"Frequency = {output[0][2]/1e9:.6f} GHz")
print(f"Phase = {output[0][3]:.6f} rad")
```

### Measurement

The `measurement` subpackage provides tools for measurement and data acquisition. Here's a simple example:

```python
import numpy as np
from scresonators.measurement.vna_measurement import get_default_power_sweep_config, power_sweep_v2
from scresonators.measurement.ZNB import ZNB20

# Get default configuration for power sweep
config = get_default_power_sweep_config()

# Modify some parameters
config["freqs"] = np.array([5.05]) * 1e9  # Center frequency in Hz
config["nvals"] = 5  # Number of power points
config["pow_start"] = -10  # Starting power in dBm
config["pow_inc"] = -5  # Power increment in dB
config["folder"] = "example_measurement"  # Folder for saving data

# Connect to the VNA
VNA = ZNB20("TCPIP0::192.168.1.1::INSTR")

# Perform the power sweep
result = power_sweep_v2(config, VNA)
```

## Examples

For more examples, see the `example_namespace.py` and `example_measurement.py` files in the root directory.
